#!/bin/bash

# These cause the script to fail without giving a phenotype name in $1, or if any intermediate step produces an error.

set -u
set -e
# Patrick Miller
# Do all ldpred steps 1 phenotype at a time, saving only the weights and not the intermediate results.
# The reason we do this is because the intermediate results are much too large to save permanently, but the weights
# This version maps plink files onto task ids

# The script allows cleaning (removing intermediate results) as well as testing (not running commands, making sure files are ok)
# by setting the testing and clean flags respectively. Eventually these will be arguments.
# If intermediate results are present where expected, the program does not recompute them.

#$ -M patr1ckm.crc@gmail.com	 # Email address for job notification
#$ -m ae		 # Send mail when job begins, ends and aborts
#$ -pe smp 10  #Specify parallel environment and legal core size
#$ -q *@@daccss		 # Specify queue
#$ -N ldp	         # Specify job name
#$ -t 2        # number of chunks
#$ -o SGE_Output/

module load python/2.7.8

mname=$1
loc=../3_subsets
gfiles=("" $(find $loc/1_plink -type f -printf '%f\n' | sed 's/\..*//' | sort | uniq) )
ld_pref=$mname
ld_rad=("" 300 800)
# if testing=true, commands are printed but not executed. Useful for checking filenames.
testing=false
# remove .coord files after ldpred completes?
clean=true
# compute polygenic scores?
scores=false

# Check if $SGE_TASK_ID is set. If not, check $2, else use 1.  
gid=${2:-1}
i=${SGE_TASK_ID:=$gid}
jobid=${JOB_ID:=100}
gf=$loc/1_plink/${gfiles[$i]}
ld_rad1=${ld_rad[$i]}
ns=ns.txt
gftmp=$gf.$mname.$i
mkdir -p logs $loc/2_ssf $loc/3_coord $loc/4_pred $loc/5_scores
logfile=logs/$mname.$i.log
logcho() { echo "$@" 1>> $logfile; echo "$@";}
logcho ""
logcho "running do_ldpred on $mname"
logcho ""
logcho ""
logcho "read the following plink files: ${gfiles[@]}"
logcho "cleaning = $clean, testing = $testing"
logcho "running script using $gf"
logcho "will coordinate with temporary $gftmp to prevent collisions"
logcho "job $jobid"
echo $mname $jobid >> jids.txt
#python test.py
logcho ""

## 2. Clean data, add c-bp
f=$loc/0_ma/"$mname".tbl
ssfname1=$(echo "$loc/2_ssf/g$i/"$mname".ssf")

logcho "cleaning raw ma $f, adding c-bp from  $gf"
if [[ "$testing" = false ]] && [[ ! -f $ssfname1 ]]; then 
  Rscript clean.R $f $gf $ssfname1 >> $logfile 2>&1
  logcho "cleaned, files written to 2_ssf/g$i"
else
  logcho "   cleaned ma files already found"
fi
logcho ""

n=$(egrep "(^| )$mname( |$)" $ns | awk '{print $2}' )
nweights=$( ls $loc/4_pred/g$i/$mname/ | wc -l )
nraw=$(ls $loc/4_pred/g$i/$mname/*.raw | wc -l)
nscore=$(ls $loc/5_scores/g$i/$mname/ | wc -l)

## 3. Coordinate

cname1=$(echo "$loc/3_coord/g$i/$mname.coord")

logcho "coordinating genotypes with --gf=$gftmp, --ssf=$ssfname1, --N=$n, --out=$cname1 --ssf_format=STANDARD"
if [[ "$testing" = false ]] && [[ ! -f $cname1 ]] && (( $nweights == 0 )); then 
  cp $gf.bed $gftmp.bed
  cp $gf.bim $gftmp.bim
  cp $gf.fam $gftmp.fam
  python ~/bin/ldpred/coord_genotypes.py --gf=$gftmp --ssf=$ssfname1 --N=$n --out=$cname1 --ssf_format=STANDARD >> $logfile 2>&1 
  rm $gftmp.*
else 
  logcho "   coordination file found, or not needed"
fi

## 4. LDpred

logcho "running LDpred "
lname1=$(echo "$loc/4_pred/g$i/$mname/$mname")
ldnam=$(echo "$loc/4_pred/g$i/"$ld_pref"_ldradius"$ld_rad1".pickled.gz")
mkdir -p $loc/4_pred/g$i/$mname


logcho "python ~/bin/ldpred/LDpred.py --coord=$cname1 --ld_radius=$ld_rad1 --N=$n --out=$lname1 --ld_prefix=$loc/4_pred/g$i/$ld_pref"
if [[ "$testing" = false ]] && (( $nweights == 0 )); then 
 python ~/bin/ldpred/LDpred.py --coord=$cname1 --ld_radius=$ld_rad1 --N=$n --out=$lname1 --ld_prefix=$loc/4_pred/g$i/$ld_pref >> $logfile 2>&1
else 
  logcho "   ldpred weights found"
fi

if [[ "$testing" = false ]] && [[ $clean = true ]] ; then 
  logcho " rm -f $cname1"
  rm -f $cname1
  logcho " rm -f $ldnam"
  rm -f $ldnam
fi
logcho ""

## 5. Compute scores
logcho "computing polygenic scores from ldpred weights"


if [[ "$scores" = true ]] && [[ "$testing" = false ]] && (( $nraw == 0 )); then
 logcho "computing .raw files for $loc/4_pred/g$i/$mname/"
 wfiles=$(echo $loc/4_pred/g$i/$mname/*.txt)
 for wf in $wfiles
 do
   rawname=${wf%.txt}
   logcho "writing $wf > $rawname.raw"
   awk '{print $3 "\t" $4 "\t" $6}' $wf > $rawname.raw
 done
 awk '{print $3 "\t" $4 "\t" $5}' "$mname"_LDpred-inf.txt > "$mname"_weights_unchanged.raw
else 
 logcho "   .raw files found"
fi

if [[ "$scores" = true ]] && [[ "$testing" = false ]] && (( $nscore == 0 )) ; then
 logcho "computing polygenic scores"
 rfiles=$(echo $loc/4_pred/g$i/$mname/*.raw)
 for rf in $rfiles
 do
   scorename=${rf#/4_pred/5_scores}
   scorename=${scorename%.raw}
   logcho "plink2 --bfile $gf --score $rf --out $scorename "
   plink2 --bfile $gf --score $rf --out $scorename >> $logfile 2>&1 
 done
else 
 logcho "   polygenic scores found"
fi

logcho ""

